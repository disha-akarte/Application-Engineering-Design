/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.SalesPersonRole;

import business.Business;
import business.Customer;
import business.MasterOrderCatalog;
import business.Order;
import business.OrderItem;
import business.Product;
import business.ProductCatalog;
import business.SalesPersonDirectory;
import business.Salesperson;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SONY
 */
public class CreateOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateOrderJPanel
     */
    private Order order;
    private JPanel userProcessContainer;
    private Customer customer;
    private Salesperson salesperson;
    private Business business;
    private MasterOrderCatalog masterOrderCatalog;
    private ProductCatalog productCatalog;
    private int comm;
    private int sv=0;


    boolean isCheckedOut = false;

    public CreateOrderJPanel(JPanel userProcessContainer, Customer customer, Salesperson salesperson, Business business) {
        initComponents();
        this.customer = customer;
        this.salesperson = salesperson;
        this.userProcessContainer = userProcessContainer;
        this.business = business;
        this.masterOrderCatalog = business.getMasterOrderCatalog();
        this.productCatalog = business.getProductCatalog();
        order = new Order();
   
        populateProductTable();

        lblCustName.setText(customer.getCustomerName());
        lblOrderNumber.setText(String.valueOf(order.getOrderNumber()));

    }

    private void populateProductTable() {
        DefaultTableModel dtm = (DefaultTableModel) productTable.getModel();
        dtm.setRowCount(0);

        for (Product product : productCatalog.getProductcatalog()) {
            Object row[] = new Object[6];
            row[0] = product;
            row[1] = product.getProdName();
            row[2] = product.getAvailability();
            row[3] = product.getPrice();
            row[4] = product.getFloor();
            row[5] = product.getCeil();

            dtm.addRow(row);

        }
    }

    public int calculateCommision(OrderItem oi) {

        DefaultTableModel dtm = (DefaultTableModel) productTable.getModel();
        dtm.setRowCount(0);
        int qty = oi.getQuantity();
        int sp = oi.getSalesprice();
        int total = qty * sp;

        if (sp > oi.getProduct().getPrice()) {
            comm = ((int) (total * (20.0f / 100.0f)));
        } else if (sp < oi.getProduct().getPrice()) {
            comm = ((int) (total * (5.0f / 100.0f)));
        } else {
            comm = ((int) (total * (10.0f / 100.0f)));
        }
        return comm;
    }

    //Method to refresh Order table
    public void refreshOrderTable() {
        int rowCount = orderTable.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) orderTable.getModel()).removeRow(i);
        }

        for (OrderItem oi : order.getOrderItemList()) {

            Object row[] = new Object[5];
            row[0] = oi;
            row[1] = oi.getSalesprice();
            row[2] = oi.getQuantity();
            row[3] = oi.getSalesprice() * oi.getQuantity();
            int val = calculateCommision(oi);
            row[4] = val;
            ((DefaultTableModel) orderTable.getModel()).addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblCustName = new javax.swing.JLabel();
        lblOrderID = new javax.swing.JLabel();
        lblOrderNumber = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        btnGo = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtSalesPrice = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        lblCommision = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Sales Price", "Quantity", "Total Price", "Commision"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI Semilight", 0, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/SalesPersonRole/xeroxLogo.gif"))); // NOI18N
        jLabel1.setText("Create Order");

        jLabel2.setText("Customer :");

        lblCustName.setText("CustomerName");

        lblOrderID.setText("Order ID :");

        lblOrderNumber.setText("OrderNumber");

        btnBack.setText("<< BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSubmit.setText("CREATE ORDER");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnClear.setText("REMOVE ITEM");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jLabel7.setText("Select Quantity : ");

        quantitySpinner.setValue(1);

        btnGo.setText("Add to Cart");
        btnGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoActionPerformed(evt);
            }
        });

        jLabel8.setText("Enter Sales Price");

        jLabel9.setText("Commision :");

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Availability", "Target Price", "Floor Price", "Ceiling Price"
            }
        ));
        jScrollPane2.setViewportView(productTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblCustName)
                                        .addGap(46, 46, 46)
                                        .addComponent(lblOrderID)
                                        .addGap(18, 18, 18)
                                        .addComponent(lblOrderNumber)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, Short.MAX_VALUE)))
                                .addComponent(btnGo))
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSubmit)
                                .addGap(11, 11, 11))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCommision, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblCustName)
                    .addComponent(lblOrderID)
                    .addComponent(lblOrderNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGo)
                    .addComponent(jLabel8)
                    .addComponent(txtSalesPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBack)
                            .addComponent(btnSubmit)
                            .addComponent(btnClear)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9)
                            .addComponent(lblCommision, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    private void btnGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoActionPerformed
        // TODO add your handling code here
        
        int selectedRow = productTable.getSelectedRow();
        Product selectedProduct;
        int salesPrice = 0;
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            selectedProduct = (Product) productTable.getValueAt(selectedRow, 0);
        }

        try {

            salesPrice = Integer.parseInt(txtSalesPrice.getText());
            if (salesPrice > selectedProduct.getCeil()) {
                JOptionPane.showMessageDialog(this, "Enter sales price below ceiling price", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (salesPrice < selectedProduct.getFloor()) {
                JOptionPane.showMessageDialog(this, "Enter sales price above floor price", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid sales price", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int fetchedQty = (Integer) quantitySpinner.getValue();
        if (fetchedQty <= 0) {
            JOptionPane.showMessageDialog(this, "Selected should be atleast 1", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (fetchedQty <= selectedProduct.getAvailability()) {
            boolean alreadyPresent = false;
            for (OrderItem orderItem : order.getOrderItemList()) {
                if (orderItem.getProduct() == selectedProduct) {
                    int oldAvail = selectedProduct.getAvailability();
                    int newAvail = oldAvail - fetchedQty;
                    selectedProduct.setAvailability(newAvail);
                    orderItem.setQuantity(fetchedQty + orderItem.getQuantity());
                    alreadyPresent = true;
                    refreshOrderTable();
                    populateProductTable();
                    break;
                }
            }

            if (!alreadyPresent) {
                int oldAvail = selectedProduct.getAvailability();
                int newAvail = oldAvail - fetchedQty;
                selectedProduct.setAvailability(newAvail);
                order.addItem(selectedProduct, fetchedQty, salesPrice);
                refreshOrderTable();
                populateProductTable();
                txtSalesPrice.setText("");

            }
        } else {
            JOptionPane.showMessageDialog(this, "Quantity > Availability!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnGoActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:

        if (order.getOrderItemList().size() > 0) {
            order.setCustID(customer.getCustomerID());
            order.setSalesperson(salesperson);
            masterOrderCatalog.addOrder(order);
            
            isCheckedOut = true;
            int co = salesperson.getCommision();
            sv = salesperson.getSalesVolume();
            //int at = salesperson.getAboveTarget();
            //int bt = salesperson.getBelowTarget();
            
            for (OrderItem item : order.getOrderItemList()) {

                Product p = item.getProduct();
               
                salesperson.setSalesVolume(item.getQuantity());
                customer.setTotalPurchases(item.getQuantity());

                if (item.getSalesprice() > p.getPrice()) {
                    co = ((int) ((item.getSalesprice() * item.getQuantity()) * (20.0f / 100.0f)));
                    //at = item.getQuantity();
                    //salesperson.setAboveTarget(at);                  
                    salesperson.setCommision(co);
                } else if (item.getSalesprice() < p.getPrice()) {
                    co = ((int) ((item.getSalesprice() * item.getQuantity()) * (5.0f / 100.0f)));
                    //bt= item.getQuantity();
                    //salesperson.setBelowTarget(bt);
                    salesperson.setCommision(co);
                } else {
                    co = ((int) ((item.getSalesprice() * item.getQuantity()) * (10.0f / 100.0f)));
                    salesperson.setCommision(co);
                }
                
            }
            
            for(Salesperson s: business.getSalesPersonDirectory().getSalesPersonDirectory()){
                if(s.getSalesID() == salesperson.getSalesID())
                    s = salesperson;
            }
            for(Customer c: business.getCustomerDirectory().getCustomerDirectory()){
                 if(c.getCustomerID() == customer.getCustomerID())
                         c = customer;
            }
            
    
            lblCommision.setText(String.valueOf(salesperson.getCommision()));
           
            JOptionPane.showMessageDialog(null, "Order added successfully!!");
            order = new Order();
            lblOrderNumber.setText(String.valueOf(order.getOrderNumber()));
            refreshOrderTable();
            populateProductTable();
            
            
        } else {
            JOptionPane.showMessageDialog(null, "Order not added as there are no items!!");
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:

        int selectedRowCount = orderTable.getSelectedRowCount();
        if (selectedRowCount <= 0) {
            JOptionPane.showMessageDialog(null, "You didn't select any rows from the orderItem table!");
            return;
        }

        int row = orderTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Failed to retrive selected row");
            return;
        }

        OrderItem oi = (OrderItem) orderTable.getValueAt(row, 0);
        int oldQuantity = oi.getProduct().getAvailability();
        int orderQuantity = oi.getQuantity();
        int newQuantity = oldQuantity + orderQuantity;
        oi.getProduct().setAvailability(newQuantity);
        order.removeItem(oi);
        JOptionPane.showMessageDialog(null, "The order item of " + orderQuantity + "of " + oi + " has been removed.");
        refreshOrderTable();

        populateProductTable();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        if (order.getOrderItemList().size() > 0) {
            ArrayList<OrderItem> orderList = order.getOrderItemList();
            for (OrderItem orderItem : orderList) {
                Product p = orderItem.getProduct();
                p.setAvailability(orderItem.getQuantity() + p.getAvailability());
            }
            order.getOrderItemList().removeAll(orderList);
        }
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnGo;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCommision;
    private javax.swing.JLabel lblCustName;
    private javax.swing.JLabel lblOrderID;
    private javax.swing.JLabel lblOrderNumber;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField txtSalesPrice;
    // End of variables declaration//GEN-END:variables
}
